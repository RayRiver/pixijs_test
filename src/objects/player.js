// Generated by CoffeeScript 1.10.0
(function() {
  var Player,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Player = (function(superClass) {
    extend(Player, superClass);

    function Player(config) {
      var dynamic, h, ref, ref1, ref2, renderer, w;
      Player.__super__.constructor.apply(this, arguments);
      this.setTag("Player");
      config = config != null ? config : {};
      w = (ref = config.width) != null ? ref : 30;
      h = (ref1 = config.height) != null ? ref1 : 30;
      dynamic = (ref2 = config.dynamic) != null ? ref2 : false;
      this._world = config.world;
      this._width = w;
      this._height = h;
      renderer = new PIXI.Sprite(resources["player"].texture);
      this.setRenderer(renderer);
      renderer.width = w;
      renderer.height = h;
      renderer.anchor.x = 0.5;
      renderer.anchor.y = 0.5;
      if (this._world) {
        if (dynamic) {
          this._world.add(this);
        } else {
          this._world.addStatic(this);
        }
      }
    }

    Player.prototype.update = function(dt) {
      var ref, ref1, vx, vy, x, y;
      Player.__super__.update.apply(this, arguments);
      ref = this.getPosition(), x = ref[0], y = ref[1];
      ref1 = this.getVelocity(), vx = ref1[0], vy = ref1[1];
      x += vx * dt;
      y += vy * dt;
      return this.setDesiredPos(x, y);
    };

    Player.prototype.setDesiredPos = function(x, y) {
      this._desired_x = x != null ? x : this._desired_x;
      return this._desired_y = y != null ? y : this._desired_y;
    };

    Player.prototype.getDesiredPos = function() {
      return [this._desired_x, this._desired_y];
    };

    Player.prototype.updatePosition = function() {
      return this.setPosition(this._desired_x, this._desired_y);
    };

    Player.prototype.getBBox = function() {
      return [this._desired_x - this._width / 2, this._desired_y - this._height / 2, this._width, this._height];
    };

    return Player;

  })(utils.EntityBase);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Player = Player;

}).call(this);

//# sourceMappingURL=player.js.map
