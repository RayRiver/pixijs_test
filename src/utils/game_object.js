// Generated by CoffeeScript 1.10.0
(function() {
  var GameObject, global;

  global = this;

  GameObject = (function() {
    function GameObject() {
      this._renderer = null;
      this._components = {};
      this._tag = "Default";
    }

    GameObject.prototype.destroy = function() {
      this.removeAllComponents();
      return this.setRenderer(null);
    };

    GameObject.prototype.update = function(dt) {
      var com, name, ref, results;
      ref = this._components;
      results = [];
      for (name in ref) {
        com = ref[name];
        results.push(com.update(dt));
      }
      return results;
    };

    GameObject.prototype.addComponent = function(name, config) {
      var com, com_class;
      if (this._components[name]) {
        lib.assert(false, "component [" + name + "] already exists");
        return;
      }
      com_class = global.components[name];
      if (!com_class) {
        lib.assert(false, "component class not exist: " + name);
        return;
      }
      com = new com_class();
      cc.asert(com);
      this._components[name] = com;
      com.attach(this);
      return this;
    };

    GameObject.prototype.removeComponent = function(name) {
      var com;
      com = this._components[name];
      if (!com) {
        lib.assert(false, "cannot remove component not exist: " + name);
        return;
      }
      this._components.remove(name);
      com.detach();
      return this;
    };

    GameObject.prototype.removeAllComponents = function() {
      var com, name, ref;
      ref = this._components;
      for (name in ref) {
        com = ref[name];
        com.detach();
      }
      return this._components.clear();
    };

    GameObject.prototype.getComponent = function(name) {
      return this._components[name];
    };

    GameObject.prototype.getRenderer = function() {
      return this._renderer;
    };

    GameObject.prototype.setRenderer = function(renderer) {
      if (this._renderer) {
        this._renderer = null;
      }
      if (renderer) {
        return this._renderer = renderer;
      }
    };

    GameObject.prototype.setTag = function(tag) {
      return this._tag = tag;
    };

    GameObject.prototype.getTag = function() {
      return this._tag;
    };

    return GameObject;

  })();

  utils.GameObject = GameObject;

}).call(this);

//# sourceMappingURL=game_object.js.map
